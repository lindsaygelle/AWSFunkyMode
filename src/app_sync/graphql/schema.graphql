input CreateConsoleInput {
    abbreviation: String!
    name: String!
}

type Console {
    abbreviation: String!
    createdDate: AWSDateTime!
    id: ID!
    name: String!
    updatedDate: AWSDateTime!
}

type ConsoleConnection {
    items: [Console]
    nextToken: String
}

input CreateGameInput {
    consoleId: ID!
    name: String!
}

type Game {
    consoleId: ID!
    createdDate: AWSDateTime!
    id: ID!
    name: String!
    updatedDate: AWSDateTime!
}

type GameConnection {
    items: [Game]
    nextToken: String
}

input createQuoteInput {
    gameId: ID!
    text: String!
}

type Quote {
    createdDate: AWSDateTime!
    gameId: ID!
    text: String!
    updatedDate: AWSDateTime!
}

type QuoteConnection {
    items: [Quote]
    nextToken: String
}

input CreateEntityInput {
    beginOffset: Int!
    endOffset: Int!
    order: Int!
    quoteId: ID!
    score: Float!
    text: String!
    type: String!
}

type Entity {
    beginOffset: Int!
    createdDate: AWSDateTime!
    endOffset: Int!
    id: ID!
    order: Int!
    quoteId: ID!
    score: Float!
    text: String!
    type: String!
    updatedDate: AWSDateTime!
}

type EntityConnection {
    items: [Entity]
    nextToken: String
}

type Mutation {
    createConsole(input: CreateConsoleInput): Console
    createGame(input: CreateGameInput): Game
    createQuote(input: createQuoteInput): Quote
    createEntity(input: CreateEntityInput): Entity
}

type Query {
    getConsole(id: ID!): Console
    getConsoles(limit: Int, nextToken: String): ConsoleConnection
    getGame(id: ID!): Game
    getGames(limit: Int, nextToken: String): GameConnection
    getQuote(id: ID!): Quote
    getQuotes(consoleId: ID, limit: Int, nextToken: String): QuoteConnection
    getEntity(id: ID!): Entity
    getEntities(quoteId: ID, limit: Int, nextToken: String): EntityConnection
}

schema {
    mutation: Mutation
    query: Query
}
