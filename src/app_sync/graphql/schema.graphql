input CreateUserInput {
    email: String!
    id: ID!
}

input DeleteUserInput {
    id: ID!
}

input GetUserInput {
    id: ID!
}

input GetUsersInput {
    limit: Int
    nextToken: String
}

input UpdateUserInput {
    id: ID!
}

type Game {
    CreatedDate: AWSDateTime!
    GSI: String! # Example="Game"
    GameId: ID! # Example="0"
    Name: String! # Example="Donkey Kong Country"
    PartitionKey: String! # Example="Game#0"
    SortKey: String! # Example="Game#0&Metadata"
    UpdatedDate: AWSDateTime!
}

type Console {
    ConsoleId: ID! # Example="0"
    CreatedDate: AWSDateTime!
    GSI: String! # Example="Console"
    Name: String! # Example="Super Nintendo Entertainment System"
    PartitionKey: String! # Example="Console#0"
    SortKey: String! # Example="Console#Metadata"
    UpdatedDate: AWSDateTime!
}

type Quote {
    ConsoleId: ID! # Example="0"
    CreatedDate: AWSDateTime!
    GSI: String! # Example="Quote"
    GameId: ID! # Example="0"
    PartitionKey: String! # Example="Game#0&Console#0"
    QuoteId: ID! # Example="0"
    SortKey: String! # Example="Quote#0&Metadata"
    Text: String! # Example="If you guys see Candy on your way out, tell her I'll give her surfing lessons anytime!"
    UpdatedDate: AWSDateTime!
}

type Entity {
    CreatedDate: AWSDateTime!
    EntityId: ID! # Example="0"
    GSI: String! # Example="Entity"
    PartitionKey: String! # Example="Game#0&Console#0"
    QuoteId: ID! # Example="0"
    SortKey: String! # Example="Quote#0&Entity&Metadata"
    UpdatedDate: AWSDateTime!
}

type EntityItem {
    BeginOffset: Int! # Example="16"
    CreatedDate: AWSDateTime!
    EndOffset: Int! # Example="21"
    EntityId: ID! # Example="0"
    EntityItemId: ID! # Example="0"
    GSI: String! # Example="EntityItem"
    Order: Int # Example="0"
    PartitionKey: String! # Example="Game#0&Console#0"
    Score: Float! # Example="0.7504729628562927"
    SortKey: String! # Example="Quote#0&Entity&Item#0"
    Text: String! # Example="Candy"
    Type: String! # Example="PERSON"
    UpdatedDate: AWSDateTime!
}

type KeyPhrase {
    CreatedDate: AWSDateTime!
    GSI: String! # Example="KeyPhrase"
    KeyPhraseId: ID! # Example="0"
    PartitionKey: String! # Example="Game#0&Console#0"
    QuoteId: ID! # Example="0"
    SortKey: String! # Example="Quote#0&KeyPhrase&Metadata"
    UpdatedDate: AWSDateTime!
}

type KeyPhraseItem {
    BeginOffset: Int! # Example="3"
    CreatedDate: AWSDateTime!
    EndOffset: Int! # Example="11"
    GSI: String! # Example="KeyPhraseItem"
    KeyPhraseId: ID! # Example="0"
    KeyPhraseItemId: ID! # Example="0"
    Order: Int # Example="0"
    PartitionKey: String! # Example="Game#0&Console#0"
    Score: Float! # Example="0.9941169619560242"
    SortKey: String! # Example="Quote#0&KeyPhrase&Item#0"
    Text: String! # Example="you guys"
    UpdatedDate: AWSDateTime!
}

type PII {
    CreatedDate: AWSDateTime!
    GSI: String! # Example="PII"
    PIIId: ID! # Example="0"
    PartitionKey: String! # Example="Game#0&Console#0"
    QuoteId: ID! # Example="0"
    SortKey: String! # Example="Quote#0&PII&Metadata"
    UpdatedDate: AWSDateTime!
}

type PIIItem {
    BeginOffset: Int! # Example="16"
    CreatedDate: AWSDateTime!
    EndOffset: Int! # Example="21"
    GSI: String! # Example="PIIItem"
    Order: Int # Example="0"
    PIIId: ID! # Example="0"
    PIIItemID: ID! # Example="0"
    PartitionKey: String! # Example="Game#0&Console#0"
    QuoteId: ID! # Example="0"
    Score: Float! # Example="0.9998854398727417"
    SortKey: String! # Example="Quote#0&PII&Item#0"
    Type: String! # Example="NAME"
    UpdatedDate: AWSDateTime!
}

type Sentiment {
    CreatedDate: AWSDateTime!
    GSI: String! # Example="Sentiment"
    PartitionKey: String! # Example="Game#0&Console#0"
    QuoteId: ID! # Example="0"
    SentimentId: ID! # Example="0"
    SortKey: String! # Example="Quote#0&Sentiment&Metadata"
    UpdatedDate: AWSDateTime!
}

type SentimentValue {
    CreatedDate: AWSDateTime!
    GSI: String! # Example="SentimentValue"
    PartitionKey: String! # Example="Game#0&Console#0"
    QuoteId: ID! # Example="0"
    Sentiment: String! # Example="NEUTRAL"
    SentimentId: ID! # Example="0"
    SentimentValueId: ID! # Example="0"
    SortKey: String! # Example="Quote#0&Sentiment&Value"
    UpdatedDate: AWSDateTime!
}

type SentimentScore {
    CreatedDate: AWSDateTime!
    GSI: String! # Example="SentimentScore"
    Mixed: Float! # Example="0.0003706642019096762"
    Negative: Float! # Example="0.017443181946873665"
    Neutral: Float! # Example="0.502835750579834"
    PartitionKey: String! # Example="Game#0&Console#0"
    Positive: Float! # Example="0.47935038805007935"
    SentimentId: ID! # Example="0"
    SentimentScoreId: ID! # Example="0"
    SortKey: String! # Example="Quote#0&Sentiment&Score"
    UpdatedDate: AWSDateTime!
}

type Syntax {
    CreatedDate: AWSDateTime!
    GSI: String! # Example="Syntax"
    PartitionKey: String! # Example="Game#0&Console#0"
    QuoteId: ID! # Example="0"
    SortKey: String! # Example="Quote#0&Syntax&Metadata"
    SyntaxId: ID! # Example="0"
    UpdatedDate: AWSDateTime!
}

type SyntaxItem {
    BeginOffset: Int! # Example="0"
    CreatedDate: AWSDateTime!
    EndOffset: Int! # Example="2"
    GSI: String! # Example="SyntaxItem"
    Order: Int # Example="0"
    PartitionKey: String! # Example="Game#0&Console#0"
    SortKey: String! # Example="Quote#0&Syntax&Item#0"
    SyntaxId: ID! # Example="0"
    SyntaxItemId: ID! # Example="0"
    Text: String! # Example="If"
    TokenId: Int! # Example="1"
    UpdatedDate: AWSDateTime!
}

type SyntaxItemPartOfSpeech {
    CreatedDate: AWSDateTime!
    GSI: String! # Example="SyntaxItemPartOfSpeech"
    PartitionKey: String! # Example="Game#0&Console#0"
    Score: Float! # Example="0.9999009966850281"
    SortKey: String! # Example="Quote#0&Syntax&Item#0&PartOfSpeech"
    SyntaxId: ID! # Example="0"
    SyntaxItemId: ID! # Example="0"
    Tag: String! # Example="SCONJ"
    UpdatedDate: AWSDateTime!
}

type User {
    CreatedDate: AWSDateTime!
    Email: AWSEmail!
    PartitionKey: String!
    SortKey: String!
    UpdatedDate: AWSDateTime!
}

type UserConnection {
    nextToken: String
    users: [User]
}

type Mutation {
    createUser(input: CreateUserInput): User!
        @aws_auth(cognito_groups: ["admin"])
    deleteUser(input: DeleteUserInput!): User!
        @aws_auth(cognito_groups: ["admin"])
}

type Query {
    getUser(input: GetUserInput): User
        @aws_auth(cognito_groups: ["user"])
    getUsers(input: GetUsersInput): UserConnection
        @aws_auth(cognito_groups: ["admin"])
}

schema {
    mutation: Mutation
    query: Query
}
